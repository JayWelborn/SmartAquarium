from datetime import datetime

from django.contrib.auth import get_user_model
from django.db import IntegrityError, transaction
from django.test import TestCase

from temperature.models import Thermometer
from temperature.exceptions import ThermometerRegistrationError


class ThermometerModelTests(TestCase):
    """Tests for Thermometer Class

    Methods:
        test_new_therm_properties: Saving a model should auto-generate a unique id. New therms
            should not be registered, or have a registration date.
        test_duplicate_id_rejeceted: UUIDs need to be unique, so attempting to re-use one
            should fail
        test_register thermometer: Registering a thermometer should associated a user with it.
            Attempting to register an already registered thermometer should fail.
        test_single_user_multiple_therms: One user should be able to own many thermometers

    References:
    """

    @classmethod
    def setUpClass(cls):
        """
        Create Seed Data
        """
        cls.user = get_user_model().objects.create_user(
            username="testy",
            password="pass",
            email="test@test.com"
        )
        with transaction.atomic():
            cls.user.save()

    @classmethod
    def tearDownClass(cls):
        """
        Get rid of seed data
        """
        with transaction.atomic():
            cls.user.delete()

    def test_new_therm_properties(self):
        """
        New therms should have uuid autogenerated. They should not have owners, should not be
        registered, and should not have a registration date.
        """
        therm = Thermometer(
            display_name="test thermometer"
        )
        therm.save()
        self.assertTrue(therm.therm_id)
        self.assertFalse(therm.registered)
        self.assertIsNone(therm.registration_date)
        self.assertEquals(therm.display_name, "test thermometer")
        self.assertEquals(therm.created_date.date(), datetime.utcnow().date())
        self.assertIsNone(therm.owner)
    
    def test_duplicate_id_rejected(self):
        """
        UUIDs need to be unique, so attempting to re-use one should fail
        """
        therm_one = Thermometer(
            display_name="one"
        )
        therm_one.save()

        try:
            therm_two = Thermometer(
                display_name="two",
                therm_id=therm_one.therm_id
            )
            therm_two.save()
            self.fail("Should not be able to save thermometer with repeat uuid")
        except Exception as e:
            self.assertEquals(str(e), 'UNIQUE constraint failed: temperature_thermometer.therm_id')

    def test_register_thermometer(self):
        """
        Registering a thermometer should associated a user with it. Attempting to register an
        already registered thermometer should fail.
        """
        therm = Thermometer(
            display_name="registration test"
        )
        self.assertIsNone(therm.owner)
        therm.register(self.user)
        self.assertIs(self.user, therm.owner)
        self.assertTrue(therm.registered)
        self.assertEquals(therm.registration_date.date(), datetime.utcnow().date())

        other_user = get_user_model().objects.create_user(
            username="testerson",
            password="pass",
            email="test@test.org"
        )

        try:
            therm.register(other_user)
            self.fail("Attempting to register second thermometer should fail")
        except ThermometerRegistrationError as tre:
            self.assertEquals(str(tre), "Thermometer Already Registered")

    def test_single_user_multiple_therms(self):
        """
        One user should be able to own many thermometers
        """
        therms = []
        for i in range(20):
            therm = Thermometer(
                display_name=f"therm{i}"
            )
            with transaction.atomic():
                therm.register(self.user)
            self.assertIs(self.user, therm.owner)
            therms.append(therm)
        
        self.assertEqual(len(self.user.thermometers.all()), 20)
